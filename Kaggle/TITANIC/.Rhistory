head(hatvalues(fit))
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
plot(fit, which=3)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
dy <-predict(fitno, out2)- predict(fit, out2)
predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
View(swiss)
View(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
x1hist()
x1hist(X1C)
lm(y ~ x1 + x3)$coef[2])
lm(y ~ x1 + x3)$coef[2]))
lm(y ~ x1 + x3)
lm(y ~ x1 + x3)$coef[2])
x1 <- (temp + rnorm(100))/sqrt(2)
set.seed(seed)
seed(23)
SET.seed(seed)
SET.seed(234)
set.seed(234)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,| fit3)
anova(fit1, fit3)
anova(fit1,
| fit3)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary()
exp(lodds)/(1+exp(lodds))
summary(mdl)
summary(mdl)
exp(confint(mdl))
exp(confint(mdl))
anova(mdl)
anova(mdl)
qchisq(0.95, 1)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date'])
)
mdl <- glm(visits ~ date, poisson, hits).
mdl <-
| glm(visits ~ date, poisson, hits).
anova(mdl)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-offset=log(visits+1)
offset=log(visits+1)
qpois(.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits offset(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,
| offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hitoffset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hitoffset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
# define row and column titles
mrownames = spl('row one,row two,row 3')
mcolnames = spl('col 1,col 2,col 3,col 4')
# create temp matrix with data you want to plot
temp = matrix(NA, len(mrownames), len(mcolnames))
rownames(temp) = mrownames
colnames(temp) = mcolnames
temp[,] = matrix(1:12,3,4)
# plot temp, display current date in (top, left) cell
plot.table(temp, format(as.Date(Sys.time()), '%d %b %Y'))
bt.simple <- function(data, signal)
{
# lag singal
signal = Lag(signal, 1)
# back fill
signal = na.locf(signal, na.rm = FALSE)
signal[is.na(signal)] = 0
# calculate Close-to-Close returns
ret = ROC(Cl(data), type='discrete')
ret[1] = 0
# compute stats
bt = list()
bt$ret = ret * signal
bt$equity = cumprod(1 + bt$ret)
return(bt)
}
# Test for bt.simple functions
library('quantmod')
setInternet2(TRUE)
# load historical prices from Yahoo Finance
data = getSymbols('SPY', src = 'yahoo', from = '1980-01-01', auto.assign = F)
# Buy & Hold
signal = rep(1, nrow(data))
buy.hold = bt.simple(data, signal)
# MA Cross
sma = SMA(Cl(data),200)
signal = ifelse(Cl(data) > sma, 1, 0)
sma.cross = bt.simple(data, signal)
# Create a chart showing the strategies perfromance in 2000:2009
dates = '2000::2009'
buy.hold.equity = buy.hold$equity[dates] / as.double(buy.hold$equity[dates][1])
sma.cross.equity = sma.cross$equity[dates] / as.double(sma.cross$equity[dates][1])
chartSeries(buy.hold.equity, TA = c(addTA(sma.cross.equity, on=1, col='red')),
theme ='white', yrange = range(buy.hold.equity, sma.cross.equity) )
#*****************************************************************
#*****************************************************************
#*****************************************************************
# Load Systematic Investor Toolbox (SIT)
setInternet2(TRUE)
con = gzcon(url('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', 'rb'))
source(con)
close(con)
#*****************************************************************
# Load historical data
#******************************************************************
load.packages('quantmod')
tickers = spl('SPY')
data <- new.env()
getSymbols(tickers, src = 'yahoo', from = '1970-01-01', env = data, auto.assign = T)
bt.prep(data, align='keep.all', dates='1970::2011')
#*****************************************************************
# Code Strategies
#******************************************************************
prices = data$prices
# Buy & Hold
data$weight[] = 1
buy.hold = bt.run(data)
# MA Cross
sma = bt.apply(data, function(x) { SMA(Cl(x), 200) } )
data$weight[] = NA
data$weight[] = iif(prices >= sma, 1, 0)
sma.cross = bt.run(data, trade.summary=T)
#*****************************************************************
# Create Report
#******************************************************************
plotbt.custom.report(sma.cross, buy.hold)
bt.simple <- function(data, signal)
{
# lag singal
signal = Lag(signal, 1)
# back fill
signal = na.locf(signal, na.rm = FALSE)
signal[is.na(signal)] = 0
# calculate Close-to-Close returns
ret = ROC(Cl(data), type='discrete')
ret[1] = 0
# compute stats
bt = list()
bt$ret = ret * signal
bt$equity = cumprod(1 + bt$ret)
return(bt)
}
library('quantmod')
setInternet2(TRUE)
data = getSymbols('IBM', src = 'yahoo', from = '1990-01-01', auto.assign = F)
signal = rep(1, nrow(data))
signal
signal = rep(1, nrow(data))
buy.hold = bt.simple(data, signal)
buy.hold
sma = SMA(Cl(data),200)
sma
signal = ifelse(Cl(data) > sma, 1, 0)
sma.cross = bt.simple(data, signal)
dates = '2000::2009'
buy.hold.equity = buy.hold$equity[dates] / as.double(buy.hold$equity[dates][1])
sma.cross.equity = sma.cross$equity[dates] / as.double(sma.cross$equity[dates][1])
chartSeries(buy.hold.equity, TA = c(addTA(sma.cross.equity, on=1, col='red')),
theme ='white', yrange = range(buy.hold.equity, sma.cross.equity) )
library(quantmod)
library(ggplot)
stocks <- c("AAPL", "MSFT", "ORCL", "GOOGL")
getSymbols(stocks, from = "2011-01-01", to = "2012-12-31")
install.packages("ggplot")
library(quantmod)
library(ggplot2)
stocks <- c("AAPL", "MSFT", "ORCL", "GOOGL")
getSymbols(stocks, from = "2011-01-01", to = "2012-12-31")
candleChart(AAPL, theme = Theme.black)
addADX()
candleChart(MSFT, theme = Theme.black)
addADX()
candleChart(ORCL, theme = Theme.black)
addADX()
candleChart(GOOGL, theme = Theme.black)
addADX()
Theme.black <- chartTheme("black")
Theme.black$up.border = "#FFFFFF00"
Theme.black$dn.border = "#FFFFFF00"
Theme.black$up.up.border = "#FFFFFF00"
Theme.black$up.dn.border = "#FFFFFF00"
Theme.black$dn.dn.border = "#FFFFFF00"
Theme.black$dn.up.border = "#FFFFFF00"
Theme.black$border = "#FFFFFF00"
candleChart(AAPL, theme = Theme.black)
addADX()
candleChart(MSFT, theme = Theme.black)
addADX()
candleChart(ORCL, theme = Theme.black)
addADX()
candleChart(GOOGL, theme = Theme.black)
addADX()
ADXAAPL <- as.data.frame(ADX(AAPL))
ADXMSFT <- as.data.frame(ADX(MSFT))
ADXORCL <- as.data.frame(ADX(ORCL))
ADXGOOGL <- as.data.frame(ADX(GOOGL))
AAPL.low <- subset(ADXAAPL, ADX < DIp & ADX < DIn)
MSFT.low <- subset(ADXMSFT, ADX < DIp & ADX < DIn)
ORCL.low <- subset(ADXORCL, ADX < DIp & ADX < DIn)
GOOGL.low <- subset(ADXGOOGL, ADX < DIp & ADX < DIn)
nrow(AAPL.low)
nrow(MSFT.low)
nrow(ORCL.low)
nrow(GOOGL.low)
install.packages("quantmod") #Install the quantmod library
install.packages("quantmod")
library("quantmod")  #Load the quantmod Library
stockData <- new.env() #Make a new environment for quantmod to store data in
startDate = as.Date("2008-01-13") #Specify period of time we are interested in
endDate = as.Date("2012-01-12")
tickers <- c("GOO","IBM") #Define the tickers we are interested in
endDate = as.Date("2014-11-21")
startDate = as.Date("2014-01-01") #Specify period of time we are interested in
tickers <- c("GOO","IBM") #Define the tickers we are interested in
getSymbols(tickers, env = stockData, src = "yahoo", from = startDate, to = endDate)
tickers <- c("GOOG","IBM") #Define the tickers we are interested in
getSymbols(tickers, env = stockData, src = "yahoo", from = startDate, to = endDate)
head(stockData$ARM)
stocks <- getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
head(stocks)
Cl(stockData$ARM)
chartSeries(stockData$ARM)
getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
head(IBM)
Cl(IBM)
Vol(IBM)
Vl(IBM)
chartSeries(IBM)
addBBands(n=50, sd=2)
head(IBM)
head(IBM.Close)
head(IBM$Close)
.
head(IBM)
?getSymbols
?Cl
chartSeries(IBM)
candleChart(IBM)
addBBands(n=50, sd=2)
startDate = as.Date("2014-05-01") #Specify period of time we are interested in
endDate = as.Date("2014-11-21")
tickers <- c("GOOG","IBM") #Define the tickers we are interested in
getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
head(IBM)
Cl(IBM)
candleChart(IBM)
addBBands(n=50, sd=2)
indicatorValuesBBands <- BBands(Cl(IBM),n=50, sd=2)
tickers <- c("GOOG","PETR4.SA") #Define the tickers we are interested in
getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
tickers <- c("GOOG","PETR4.SA")
getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
head(PETR4.SA)
head(PETR4.SA,5)
?getSymbols
Cl(GOOG)
candleChart(PETR4.SA)
addBBands(n=40, sd=2)
addADX(n = 11, maType="EMA", wilder=TRUE)
addBBands(n=20, sd=2)
candleChart(PETR4.SA)
addBBands(n=20, sd=2)
head(Cl(GOOG),5)
head(Cl(GOOG),-5)
head(Cl(GOOG),5)
addADX(n = 11, maType="EMA")
candleChart(PETR4.SA)
addBBands(n=20, sd=2)
addADX(n = 11, maType="EMA")
head(valorBollinger,5)
valorBollinger <- BBands(Cl(PETR4.SA),n=20, sd=2)
head(valorBollinger,5)
tail(valorBollinger,5)
library("quantmod")             #Carrega
startDate = as.Date("2014-05-01")
endDate = as.Date("2014-11-21")
tickers <- c("GOOG","PETR4.SA")
getSymbols(tickers, src = "yahoo", from = startDate, to = endDate)
head(PETR4.SA,5)
head(Cl(GOOG),5)
candleChart(PETR4.SA)
addSAR(accel = c(0.02, 0.2), col = "blue")
addSAR(accel = c(0.03, 0.2), col = "blue")
candleChart(PETR4.SA)
addSAR(accel = c(0.01, 0.2), col = "blue")
addSAR(accel = c(0.02, 0.2), col = "red")
addSAR(accel = c(0.03, 0.2), col = "green")
addSAR(accel = c(0.04, 0.2), col = "white")
?SAR
valorSAR <- SAR(Cl(PETR4.SA),accel = c(0.04, 0.2))
valorSAR <- SAR(PETR4.SA,accel = c(0.04, 0.2))
View(valorSAR)
candleChart(PETR4.SA)
addSAR(accel = c(0.02, 0.05), col = "white")
candleChart(PETR4.SA)
addSAR(accel = c(0.02, 0.05), col = "blue")
addSAR(accel = c(0.02, 0.1), col = "red")
addSAR(accel = c(0.02, 0.15), col = "green")
addSAR(accel = c(0.02, 0.2), col = "white")
candleChart(PETR4.SA)
addSAR(accel = c(0.01, 0.2), col = "blue")
addSAR(accel = c(0.02, 0.2), col = "red")
addSAR(accel = c(0.03, 0.2), col = "green")
addSAR(accel = c(0.04, 0.2), col = "white")
#Para criar um dataset de teste
t= 100
set.seed(2015)
transacoes <- data.frame(DVD = rbinom(t, 1, .7)
, GELADEIRA = rbinom(t, 1, .3)
, LIVRO = rbinom(t, 1, .9)
, CELULAR = rbinom(t, 1, .6)
)
regras <- apriori(as.matrix(transacoes)
,parameter=list(confidence=0.5,support=0.5))
# Para ordenar as regras
regras <- sort(regras,by="support")
# O inspect exibe as regras, neste caso ordenando pela confiança
inspect(sort(head(regras,10),decreasing=T, by="confidence") )
#Para converter o conjunto de regras em um dataframe
regras_df = data.frame(
lhs = labels(lhs(regras))$elements, #lhs -> antecedente
rhs = labels(rhs(regras))$elements, #rhs -> consequente
regras@quality)
head(regras_df,10)
?apriori
library(arules)
t= 100
set.seed(2015)
transacoes <- data.frame(DVD = rbinom(t, 1, .7)
, GELADEIRA = rbinom(t, 1, .3)
, LIVRO = rbinom(t, 1, .9)
, CELULAR = rbinom(t, 1, .6)
)
regras <- apriori(as.matrix(transacoes)
,parameter=list(confidence=0.5,support=0.5))
# Para ordenar as regras
regras <- sort(regras,by="support")
# O inspect exibe as regras, neste caso ordenando pela confiança
inspect(sort(head(regras,10),decreasing=T, by="confidence") )
#Para converter o conjunto de regras em um dataframe
regras_df = data.frame(
lhs = labels(lhs(regras))$elements, #lhs -> antecedente
rhs = labels(rhs(regras))$elements, #rhs -> consequente
regras@quality)
head(regras_df,10)
binom.test(60, 12, p =.5, alternative = “one.sided”, “less”, “greater”, conf.level = .95)
binom.test(60, 12, p =.5, conf.level = .95)
binom.test(60, 120, p =.5, conf.level = .95)
setwd("C:/Users/Leandro/Google Drive/FMU/Kaggle/TITANIC")
library(data.table)
treinamento<-data.table(read.csv("train.csv"))
validacao<-data.table(read.csv("test.csv"))
#Conhecendo as bases
names(treinamento) #Quais são meu atributos?
summary(treinamento) #Uma análise descritiva
#Carregando as bases para a árvore de decisão
library(rpart)
library(stats)
library(caret)
library(ROCR)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
treinamento$FamilySize <- treinamento$SibSp + treinamento$Parch + 1
validacao$FamilySize <- validacao$SibSp + validacao$Parch + 1
i <- 0
for (i in 1:length(treinamento$Survived)) {
if (treinamento$FamilySize[i] < 4) {
treinamento$FamilySize[i] <- 1
} else {
treinamento$FamilySize[i] <- 0
}
}
i <- 0
for (i in 1:length(validacao$PassengerId)) {
if (validacao$FamilySize[i] < 4) {
validacao$FamilySize[i] <- 1
} else {
validacao$FamilySize[i] <- 0
}
}
treinamento$Cabin_Tratada <- 0
i <- 0
for (i in 1:length(treinamento$Survived)) {
if (treinamento$Cabin[i] == treinamento$Cabin[1]) {
treinamento$Cabin_Tratada[i] <- "SI"
} else {
treinamento$Cabin_Tratada[i] <- "CA"
}
}
treinamento$Cabin_Tratada <- as.factor(treinamento$Cabin_Tratada)
validacao$Cabin_Tratada <- 0
i <- 0
for (i in 1:length(validacao$PassengerId)) {
if (validacao$Cabin[i] == validacao$Cabin[1]) {
validacao$Cabin_Tratada[i] <- "SI"
} else {
validacao$Cabin_Tratada[i] <- "CA"
}
}
validacao$Cabin_Tratada <- as.factor(validacao$Cabin_Tratada)
library(party)
set.seed(111)
rTree <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + FamilySize + Cabin_Tratada,
data = treinamento, controls=cforest_unbiased(ntree=2000, mtry=3))
summary(rTree)
summary(rTree)
predicao5 <- predict(rTree, validacao, OOB=TRUE, type = "response")
levels(treinamento)
levels(validacao)
i <- 0
for (i in 1:length(treinamento$Survived)) {
if (treinamento$Embarked[i] == "") {
treinamento$Embarked[i] <- as.factor("S")
}
}
treinamento$Embarked <- as.character(treinamento$Embarked)
i <- 0
for (i in 1:length(treinamento$Survived)) {
if (treinamento$Embarked[i] == "") {
treinamento$Embarked[i] <- "S"
}
}
treinamento$Embarked <- as.factor(treinamento$Embarked)
predicao5 <- predict(rTree, validacao, OOB=TRUE, type = "response")
which(is.na(treinamento$Fare))
which(is.na(validacao$Fare))
validacao$Fare[153] <- median(validacao$Fare, na.rm=TRUE)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked
+ FamilySize,
data=treinamento[!is.na(treinamento$Age),], method="anova")
treinamento$Age[is.na(treinamento$Age)] <- predict(Agefit, treinamento[is.na(combi$Age),])
treinamento$Age[is.na(treinamento$Age)] <- predict(Agefit,
treinamento[is.na(treinamento$Age),])
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked
+ FamilySize,
data=validacao[!is.na(validacao$Age),], method="anova")
validacao$Age[is.na(validacao$Age)] <- predict(Agefit,
validacao[is.na(validacao$Age),])
predicao5 <- predict(rTree, validacao, OOB=TRUE, type = "response")
rTree <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + FamilySize + Cabin_Tratada,
data = treinamento, controls=cforest_unbiased(ntree=2000, mtry=3))
summary(rTree)
predicao5 <- predict(rTree, validacao, OOB=TRUE, type = "response")
avaliacao5 <- data.frame(PassengerId = validacao$PassengerId,
Survived = predicao5)
write.csv(avaliacao5, file = "avaliacao5.csv", row.names = FALSE)
varImpPlot(rTree)
library(caret)
varImpPlot(rTree)
varImp(rTree)
arvore4 <- rpart(Survived ~ Pclass + Sex + Age + Fare +
Embarked + as.factor(FamilySize) + Cabin_Tratada,
data=treinamento, method="class")
varImp(arvore4)
